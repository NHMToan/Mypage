{"version":3,"sources":["components/InfoCard.jsx","components/Profile.jsx","screens/MyPage.js","config/Router.js","App.js","serviceWorker.js","index.js","assets/img/avatar.jpg","assets/img/bg_pattern.png"],"names":["infoTabsList","key","tab","InfoCard","props","useState","tabKey","setTabkey","className","style","marginBottom","boxShadow","borderRadius","tabList","onTabChange","renderChildrenByTabKey","Profile","gutter","lg","md","alt","size","src","mypic","type","href","target","dashed","shape","margin","FacebookOutlined","InstagramOutlined","TwitterOutlined","MyPage","useEffect","document","body","backgroundColor","minHeight","display","flexDirection","justifyContent","position","transition","withRouter","strict","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"gSAIMA,EAAe,CACnB,CACEC,IAAK,SACLC,IAAK,8CAEP,CACED,IAAK,YACLC,IAAK,4CAEP,CACED,IAAK,SACLC,IAAK,0CAiCMC,MA9Bf,SAAkBC,GAAQ,IAAD,EACKC,mBAAS,UADd,mBAChBC,EADgB,KACRC,EADQ,KAcvB,OACE,kBAAC,IAAD,CACEC,UAAU,YACVC,MAAO,CACLC,aAAc,GACdC,UAAW,wCACXC,aAAc,OAEhBC,QAASb,EACTc,YAAa,SAACb,GAAD,OAASM,EAAUN,KArBL,SAACA,GAC9B,OAAQA,GACN,IAAK,SACH,MAAO,SACT,IAAK,YACH,MAAO,YACT,IAAK,SACH,MAAO,SACT,QACE,MAAO,IAcRc,CAAuBT,KC4CfU,MA3Ef,SAAiBZ,GA6Df,OACE,6BACE,kBAAC,IAAD,CAAKa,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,IAhClB,kBAAC,IAAD,CACEV,MAAO,CACLC,aAAc,GACdC,UAAW,wCACXC,aAAc,QAGhB,6BACE,yBAAKJ,UAAU,iBACb,kBAAC,IAAD,CAAQY,IAAI,GAAGC,KAAM,IAAKC,IAAKC,MAC/B,yBAAKf,UAAU,QAAf,aACA,yBAAKA,UAAU,QAAf,YACY,IACV,kBAAC,IAAD,CACEgB,KAAK,OACLC,KAAK,wCACLC,OAAO,SAHT,uCAUJ,kBAAC,IAAD,CAASC,QAAM,KAnDjB,yBAAKnB,UAAU,iBACb,4BACE,4BACE,kBAAC,IAAD,CACEa,KAAK,QACLO,MAAM,SACNnB,MAAO,CAAEoB,OAAQ,UACjBJ,KAAK,gDACLC,OAAO,SAEP,kBAACI,EAAA,EAAD,QAGJ,4BACE,kBAAC,IAAD,CAAQT,KAAK,QAAQO,MAAM,SAASnB,MAAO,CAAEoB,OAAQ,WACnD,kBAACE,EAAA,EAAD,QAGJ,4BACE,kBAAC,IAAD,CAAQV,KAAK,QAAQO,MAAM,SAASnB,MAAO,CAAEoB,OAAQ,WACnD,kBAACG,EAAA,EAAD,YA2CR,kBAAC,IAAD,CAAKd,GAAI,GAAIC,GAAI,IACf,kBAAC,EAAD,UCrDKc,MAtBf,SAAgB7B,GAad,OAZA8B,qBAAU,WACRC,SAASC,KAAK3B,MAAM4B,gBAAkB,oBAErC,IAUD,yBAAK7B,UAAU,aACb,yBAAKC,MAVe,CACtB6B,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,SAAU,WACVC,WAAY,YAKR,kBAAC,EAAD,SCNOC,mBAZf,SAAgBxC,GACd,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyC,QAAM,EAACC,KAAK,KACjB,kBAAC,EAAD,Y,OCIKC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJpB,SAASqB,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,oC,kGCA3CD,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.2e99f41b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card } from \"antd\";\n\nInfoCard.propTypes = {};\nconst infoTabsList = [\n  {\n    key: \"career\",\n    tab: <span>Career Path</span>,\n  },\n  {\n    key: \"education\",\n    tab: <span>Education</span>,\n  },\n  {\n    key: \"skills\",\n    tab: <span>Skills</span>,\n  },\n];\nfunction InfoCard(props) {\n  const [tabKey, setTabkey] = useState(\"career\");\n  const renderChildrenByTabKey = (key) => {\n    switch (key) {\n      case \"career\":\n        return \"Career\";\n      case \"education\":\n        return \"education\";\n      case \"skills\":\n        return \"skills\";\n      default:\n        return \"\";\n    }\n  };\n  return (\n    <Card\n      className=\"tabs-card\"\n      style={{\n        marginBottom: 24,\n        boxShadow: \"0 25px 50px -12px rgba(0, 0, 0, 0.25)\",\n        borderRadius: \"4px\",\n      }}\n      tabList={infoTabsList}\n      onTabChange={(key) => setTabkey(key)}\n    >\n      {renderChildrenByTabKey(tabKey)}\n    </Card>\n  );\n}\n\nexport default InfoCard;\n","import React from \"react\";\nimport \"./index.scss\";\nimport { Card, Avatar, Row, Col, Button, Divider } from \"antd\";\nimport {\n  FacebookOutlined,\n  InstagramOutlined,\n  TwitterOutlined,\n} from \"@ant-design/icons\";\nimport mypic from \"../assets/img/avatar.jpg\";\nimport InfoCard from \"./InfoCard\";\nProfile.propTypes = {};\n\nfunction Profile(props) {\n  const profileCard = () => {\n    const groupActions = () => {\n      return (\n        <div className=\"group-actions\">\n          <ul>\n            <li>\n              <Button\n                size=\"large\"\n                shape=\"circle\"\n                style={{ margin: \"0 10px\" }}\n                href=\"https://www.facebook.com/toan.nguyenhuynhminh\"\n                target=\"blank\"\n              >\n                <FacebookOutlined />\n              </Button>\n            </li>\n            <li>\n              <Button size=\"large\" shape=\"circle\" style={{ margin: \"0 10px\" }}>\n                <InstagramOutlined />\n              </Button>\n            </li>\n            <li>\n              <Button size=\"large\" shape=\"circle\" style={{ margin: \"0 10px\" }}>\n                <TwitterOutlined />\n              </Button>\n            </li>\n          </ul>\n        </div>\n      );\n    };\n    return (\n      <Card\n        style={{\n          marginBottom: 24,\n          boxShadow: \"0 25px 50px -12px rgba(0, 0, 0, 0.25)\",\n          borderRadius: \"4px\",\n        }}\n      >\n        <div>\n          <div className=\"avatar-holder\">\n            <Avatar alt=\"\" size={150} src={mypic} />\n            <div className=\"name\">Minh Toan</div>\n            <div className=\"info\">\n              Developer{\" \"}\n              <Button\n                type=\"link\"\n                href=\"https://goo.gl/maps/xKsQZXvhck1adcKA6\"\n                target=\"blank\"\n              >\n                Live in Dist 8, HCM city, Vietnam\n              </Button>\n            </div>\n          </div>\n          {/* {this.renderUserInfo(currentUser)} */}\n          <Divider dashed />\n        </div>\n        {groupActions()}\n      </Card>\n    );\n  };\n  return (\n    <div>\n      <Row gutter={24}>\n        <Col lg={7} md={24}>\n          {profileCard()}\n        </Col>\n        <Col lg={17} md={24}>\n          <InfoCard />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default Profile;\n","import React, { useEffect } from \"react\";\nimport backgroundGraphich from \"../assets/img/bg_pattern.png\";\nimport Profile from \"../components/Profile\";\nMyPage.propTypes = {};\n\nfunction MyPage(props) {\n  useEffect(() => {\n    document.body.style.backgroundColor = \"grayscale(100%)\";\n    // document.body.style.backgroundImage = \"url(\" + backgroundGraphich + \")\";\n  }, []);\n  const childrenWrapper = {\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    position: \"relative\",\n    transition: \"all .2s\",\n  };\n  return (\n    <div className=\"container\">\n      <div style={childrenWrapper}>\n        <Profile />\n      </div>\n    </div>\n  );\n}\n\nexport default MyPage;\n","import React from \"react\";\nimport { Switch, Route, withRouter, Redirect } from \"react-router-dom\";\nimport MyPage from \"../screens/MyPage\";\nfunction Router(props) {\n  return (\n    <div>\n      <Switch>\n        <Route strict path=\"/\">\n          <MyPage />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default withRouter(Router);\n","import React from \"react\";\nimport \"./App.css\";\nimport Router from \"./config/Router\";\nimport \"antd/dist/antd.css\";\nfunction App() {\n  return (\n    <div>\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/avatar.808e8017.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg_pattern.b86afb4f.png\";"],"sourceRoot":""}